!function(t,e){"function"==typeof define&&define.amd?define([],(()=>t.resonance=e())):"object"==typeof module&&module.exports?module.exports=e():t.resonance=e()}(void 0!==this?this:self,(function(){"use strict";const t=function(){return new(window.AudioContext||window.webkitAudioContext)};const e=function(t,e=1,o){let s=o.createBufferSource(),a=o.createGain();return s.buffer=t,a.gain.value=e,s.connect(a),a.connect(o.destination),{data:s,gainNode:a,audioContext:o}},o=(t=window.location.origin,e,o={})=>{const s=new URL(e,new URL(t,e?window.location.origin+"/"+e:""));for(const[t,e]of Object.entries(o))s.searchParams.set(t,e);return s.href};function s(...t){return t.reduce(((t,e)=>(t[e]=e,t)),{})}const a=s("SOUND_CREATED","SOUND_PAUSED","SOUND_PLAYING","SOUND_RESUMED","SOUND_STOPPED"),i=s("SOUND_LOADING","SOUND_LOADED","SOUND_ERROR"),n=t();function r(t){return this instanceof r?(this.audioContext=n,this.baseURL=t.baseURL,this.searchParams=t.searchParams||{},this.playTime=0,this.currentSoundIndex=0,this.loadedSounds=[],this.states={PRELOAD:i.SOUND_LOADING,PLAY:a.SOUND_CREATED},Array.isArray(t.audioPaths)?this.audioPaths=t.audioPaths.map((e=>o(t.baseURL,e,t.searchParams))):"string"==typeof t.audioPaths?this.audioPaths=[o(t.baseURL,t.audioPaths,t.searchParams)]:this.audioPaths=[],this.audioContext.onstatechange=()=>{console.log("Audio context state changed:",this.audioContext.state)},this):new r(t)}return r.prototype[Symbol.iterator]=function(){return this.iteratorIndex=0,{next:()=>{if(this.iteratorIndex<this.loadedSounds.length){return{value:this.loadedSounds[this.iteratorIndex++],done:!1}}return this.iteratorIndex=0,{done:!0}}}},r.prototype.load=async function(t){Array.isArray(t)||(t=[t]);try{const s=t.map((async t=>{const s=o(this.baseURL,t,{}),a=await async function(t){try{const e=Date.now(),s=o(window.location.origin,t,{timestamp:e});return new Promise(((t,e)=>{const o=new XMLHttpRequest;o.open("GET",s,!0),o.setRequestHeader("Content-Type","audio/*"),o.setRequestHeader("Accept","audio/*"),o.setRequestHeader("Range","0-*"),o.responseType="arraybuffer",o.onload=function(){200===o.status||206===o.status?t(o.response):e(new Error("Request failed with status: "+o.status))},o.onerror=function(){e(new Error("Network error occurred"))},o.send(null)}))}catch(t){throw console.error("Failed to load audio file:",t.message),t}}(s),i=await async function(t,e){return await e.decodeAudioData(t)}(a,this.audioContext);return{filePath:t,audioSource:e(i,1,this.audioContext)}}));this.loadedSounds=await Promise.all(s),this.states.PRELOAD=i.SOUND_LOADED}catch(t){console.error(`Failed to load audio: ${t.message}`),this.states.PRELOAD=i.SOUND_ERROR}return this},r.prototype.prev=async function(){if(0===this.loadedSounds.length)return console.warn("No loaded sounds available."),null;this.states.PLAY===a.SOUND_PLAYING&&await this.stop(),this.iteratorIndex=(this.iteratorIndex-1+this.loadedSounds.length)%this.loadedSounds.length;return this.loadedSounds[this.iteratorIndex]},r.prototype.next=function(){if(0===this.loadedSounds.length)return console.warn("No loaded sounds available."),this;this.states.PLAY===a.SOUND_PLAYING&&this.stop(),this.iteratorIndex=(this.iteratorIndex+1)%this.loadedSounds.length;return this.loadedSounds[this.iteratorIndex]},r.prototype.play=async function(o=1,s=!0){if(await this.load(this.audioPaths),this.states.PRELOAD!==i.SOUND_LOADED)return console.warn("No loaded sounds available. Use the load method to load sounds."),this;switch(this.states.PLAY){case a.SOUND_CREATED:case a.SOUND_PAUSED:case a.SOUND_STOPPED:const s=this.loadedSounds[0];if(s){const{audioSource:i}=s;!this.audioSource||this.states.PLAY!==a.SOUND_PLAYING&&this.states.PLAY!==a.SOUND_RESUMED||this.stop(),this.audioSource=e(i.data.buffer,o,t()),this.audioSource.data.start(0),this.states.PLAY=a.SOUND_PLAYING}break;default:console.warn("Unexpected play state.")}return this},r.prototype.resume=function(t=this.playTime||0){if(this.states.PLAY===a.SOUND_PAUSED)if(this.audioSource)try{"suspended"===this.audioContext.state?(this.audioSource.data.start(0,t),this.states.PLAY=a.SOUND_RESUMED,this.playTime=t):console.warn("Cannot resume when AudioContext state is not 'suspended'.")}catch(t){console.error("Error during resume:",t.message)}else console.warn("No audio source available to resume.");else console.warn("Cannot resume when the sound is not paused.");return this},r.prototype.pause=function(){if(this.states.PLAY===a.SOUND_RESUMED)this.audioSource&&(this.audioSource.data.stop(),this.playTime=this.audioSource.audioContext.currentTime-this.playTime,this.states.PLAY=a.SOUND_PAUSED);return this},r.prototype.stop=function(){return this.states.PLAY!==a.SOUND_PLAYING&&this.states.PLAY!==a.SOUND_RESUMED||this.audioSource&&(this.audioSource.data.stop(),this.states.PLAY=a.SOUND_STOPPED),this},r.prototype.dispose=function(){this.states.PLAY!==a.SOUND_PLAYING&&this.states.PLAY!==a.SOUND_RESUMED||this.stop(),this.audioSource&&this.audioSource.data.disconnect()},r.prototype.setVolume=function(t){return this.audioSource&&(this.audioSource.gainNode.gain.value=t),this},r.prototype.getCurrentState=function(){return this.states.PLAY},r.prototype.getCurrentTime=function(){return this.audioSource?this.audioSource.audioContext.currentTime:0},r.prototype.getTotalDuration=function(){return this.audioSource?this.audioSource.data.buffer.duration:0},r.prototype.getCurrentSoundIndex=function(){return this.currentSoundIndex},{sound:r}}));